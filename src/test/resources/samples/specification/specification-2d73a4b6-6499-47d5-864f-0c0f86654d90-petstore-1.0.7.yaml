---
$schema: "http://qubership.org/schemas/product/qip/specification"
id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7"
name: "1.0.7"
content:
  createdWhen: 1751626075589
  modifiedWhen: 1751626075657
  createdBy:
    id: "0"
    username: "developer"
  modifiedBy:
    id: "0"
    username: "developer"
  deprecated: false
  version: "1.0.7"
  source: "MANUAL"
  operations:
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-addPet"
    name: "addPet"
    createdWhen: 1751626075606
    modifiedWhen: 1751626075606
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/pet"
    specification:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "405":
          content: {}
          description: "Invalid input"
      operationId: "addPet"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
        description: "Pet object that needs to be added to the store"
      x-codegen-request-body-name: "body"
    requestSchema:
      application/xml:
        $id: "http://system.catalog/schemas/#/components/schemas/Pet"
        xml:
          name: "Pet"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        required:
        - "name"
        - "photoUrls"
        properties:
          id:
            type: "integer"
            format: "int64"
          name:
            type: "string"
            example: "doggie"
          tags:
            xml:
              wrapped: true
            type: "array"
            items:
              $ref: "#/definitions/Tag"
          status:
            enum:
            - "available"
            - "pending"
            - "sold"
            type: "string"
            description: "pet status in the store"
          category:
            $ref: "#/definitions/Category"
          photoUrls:
            xml:
              wrapped: true
            type: "array"
            items:
              xml:
                name: "photoUrl"
              type: "string"
        definitions:
          Tag:
            xml:
              name: "Tag"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
          Category:
            xml:
              name: "Category"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/Pet"
        xml:
          name: "Pet"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        required:
        - "name"
        - "photoUrls"
        properties:
          id:
            type: "integer"
            format: "int64"
          name:
            type: "string"
            example: "doggie"
          tags:
            xml:
              wrapped: true
            type: "array"
            items:
              $ref: "#/definitions/Tag"
          status:
            enum:
            - "available"
            - "pending"
            - "sold"
            type: "string"
            description: "pet status in the store"
          category:
            $ref: "#/definitions/Category"
          photoUrls:
            xml:
              wrapped: true
            type: "array"
            items:
              xml:
                name: "photoUrl"
              type: "string"
        definitions:
          Tag:
            xml:
              name: "Tag"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
          Category:
            xml:
              name: "Category"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
    responseSchemas:
      "405": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-createUser"
    name: "createUser"
    createdWhen: 1751626075609
    modifiedWhen: 1751626075609
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/user"
    specification:
      tags:
      - "user"
      summary: "Create user"
      responses:
        default:
          content: {}
          description: "successful operation"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        description: "Created user object"
      x-codegen-request-body-name: "body"
    requestSchema:
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/User"
        xml:
          name: "User"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          id:
            type: "integer"
            format: "int64"
          email:
            type: "string"
          phone:
            type: "string"
          lastName:
            type: "string"
          password:
            type: "string"
          username:
            type: "string"
          firstName:
            type: "string"
          userStatus:
            type: "integer"
            format: "int32"
            description: "User Status"
        definitions: {}
    responseSchemas:
      default: {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-createUsersWithArrayInput"
    name: "createUsersWithArrayInput"
    createdWhen: 1751626075612
    modifiedWhen: 1751626075612
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/user/createWithArray"
    specification:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      responses:
        default:
          content: {}
          description: "successful operation"
      operationId: "createUsersWithArrayInput"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/User"
        required: true
        description: "List of user object"
      x-codegen-request-body-name: "body"
    requestSchema:
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/User"
        type: "array"
        items:
          type: "object"
          required: null
          properties:
            id:
              type: "integer"
              format: "int64"
            email:
              type: "string"
            phone:
              type: "string"
            lastName:
              type: "string"
            password:
              type: "string"
            username:
              type: "string"
            firstName:
              type: "string"
            userStatus:
              type: "integer"
              format: "int32"
              description: "User Status"
        $schema: "http://json-schema.org/draft-07/schema#"
        definitions: {}
    responseSchemas:
      default: {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-createUsersWithListInput"
    name: "createUsersWithListInput"
    createdWhen: 1751626075614
    modifiedWhen: 1751626075614
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/user/createWithList"
    specification:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      responses:
        default:
          content: {}
          description: "successful operation"
      operationId: "createUsersWithListInput"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/User"
        required: true
        description: "List of user object"
      x-codegen-request-body-name: "body"
    requestSchema:
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/User"
        type: "array"
        items:
          type: "object"
          required: null
          properties:
            id:
              type: "integer"
              format: "int64"
            email:
              type: "string"
            phone:
              type: "string"
            lastName:
              type: "string"
            password:
              type: "string"
            username:
              type: "string"
            firstName:
              type: "string"
            userStatus:
              type: "integer"
              format: "int32"
              description: "User Status"
        $schema: "http://json-schema.org/draft-07/schema#"
        definitions: {}
    responseSchemas:
      default: {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-deleteOrder"
    name: "deleteOrder"
    createdWhen: 1751626075619
    modifiedWhen: 1751626075619
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "DELETE"
    path: "/store/order/{orderId}"
    specification:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      responses:
        "400":
          content: {}
          description: "Invalid ID supplied"
        "404":
          content: {}
          description: "Order not found"
      parameters:
      - in: "path"
        name: "orderId"
        schema:
          type: "integer"
          format: "int64"
          minimum: 1
        required: true
        description: "ID of the order that needs to be deleted"
      description: "For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
    requestSchema:
      parameters:
      - in: "path"
        name: "orderId"
        schema:
          type: "integer"
          format: "int64"
          minimum: 1
        required: true
        description: "ID of the order that needs to be deleted"
    responseSchemas:
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-deletePet"
    name: "deletePet"
    createdWhen: 1751626075622
    modifiedWhen: 1751626075622
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "DELETE"
    path: "/pet/{petId}"
    specification:
      tags:
      - "pet"
      summary: "Deletes a pet"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "400":
          content: {}
          description: "Invalid ID supplied"
        "404":
          content: {}
          description: "Pet not found"
      parameters:
      - in: "header"
        name: "api_key"
        schema:
          type: "string"
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "Pet id to delete"
      operationId: "deletePet"
    requestSchema:
      parameters:
      - in: "header"
        name: "api_key"
        schema:
          type: "string"
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "Pet id to delete"
    responseSchemas:
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-deleteUser"
    name: "deleteUser"
    createdWhen: 1751626075624
    modifiedWhen: 1751626075624
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "DELETE"
    path: "/user/{username}"
    specification:
      tags:
      - "user"
      summary: "Delete user"
      responses:
        "400":
          content: {}
          description: "Invalid username supplied"
        "404":
          content: {}
          description: "User not found"
      parameters:
      - in: "path"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "The name that needs to be deleted"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
    requestSchema:
      parameters:
      - in: "path"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "The name that needs to be deleted"
    responseSchemas:
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-findPetsByStatus"
    name: "findPetsByStatus"
    createdWhen: 1751626075627
    modifiedWhen: 1751626075627
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/pet/findByStatus"
    specification:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid status value"
      parameters:
      - in: "query"
        name: "status"
        style: "form"
        schema:
          type: "array"
          items:
            enum:
            - "available"
            - "pending"
            - "sold"
            type: "string"
            default: "available"
        explode: true
        required: true
        description: "Status values that need to be considered for filter"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
    requestSchema:
      parameters:
      - in: "query"
        name: "status"
        style: "form"
        schema:
          type: "array"
          items:
            enum:
            - "available"
            - "pending"
            - "sold"
            type: "string"
            default: "available"
        explode: true
        required: true
        description: "Status values that need to be considered for filter"
    responseSchemas:
      "200":
        application/xml:
          $id: "http://system.catalog/schemas/#/components/schemas/Pet"
          type: "array"
          items:
            type: "object"
            required:
            - "name"
            - "photoUrls"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
                example: "doggie"
              tags:
                xml:
                  wrapped: true
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
              status:
                enum:
                - "available"
                - "pending"
                - "sold"
                type: "string"
                description: "pet status in the store"
              category:
                $ref: "#/definitions/Category"
              photoUrls:
                xml:
                  wrapped: true
                type: "array"
                items:
                  xml:
                    name: "photoUrl"
                  type: "string"
          $schema: "http://json-schema.org/draft-07/schema#"
          definitions:
            Tag:
              xml:
                name: "Tag"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
            Category:
              xml:
                name: "Category"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/Pet"
          type: "array"
          items:
            type: "object"
            required:
            - "name"
            - "photoUrls"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
                example: "doggie"
              tags:
                xml:
                  wrapped: true
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
              status:
                enum:
                - "available"
                - "pending"
                - "sold"
                type: "string"
                description: "pet status in the store"
              category:
                $ref: "#/definitions/Category"
              photoUrls:
                xml:
                  wrapped: true
                type: "array"
                items:
                  xml:
                    name: "photoUrl"
                  type: "string"
          $schema: "http://json-schema.org/draft-07/schema#"
          definitions:
            Tag:
              xml:
                name: "Tag"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
            Category:
              xml:
                name: "Category"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
      "400": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-findPetsByTags"
    name: "findPetsByTags"
    createdWhen: 1751626075630
    modifiedWhen: 1751626075630
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/pet/findByTags"
    specification:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid tag value"
      deprecated: true
      parameters:
      - in: "query"
        name: "tags"
        style: "form"
        schema:
          type: "array"
          items:
            type: "string"
        explode: true
        required: true
        description: "Tags to filter by"
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
    requestSchema:
      parameters:
      - in: "query"
        name: "tags"
        style: "form"
        schema:
          type: "array"
          items:
            type: "string"
        explode: true
        required: true
        description: "Tags to filter by"
    responseSchemas:
      "200":
        application/xml:
          $id: "http://system.catalog/schemas/#/components/schemas/Pet"
          type: "array"
          items:
            type: "object"
            required:
            - "name"
            - "photoUrls"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
                example: "doggie"
              tags:
                xml:
                  wrapped: true
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
              status:
                enum:
                - "available"
                - "pending"
                - "sold"
                type: "string"
                description: "pet status in the store"
              category:
                $ref: "#/definitions/Category"
              photoUrls:
                xml:
                  wrapped: true
                type: "array"
                items:
                  xml:
                    name: "photoUrl"
                  type: "string"
          $schema: "http://json-schema.org/draft-07/schema#"
          definitions:
            Tag:
              xml:
                name: "Tag"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
            Category:
              xml:
                name: "Category"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/Pet"
          type: "array"
          items:
            type: "object"
            required:
            - "name"
            - "photoUrls"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
                example: "doggie"
              tags:
                xml:
                  wrapped: true
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
              status:
                enum:
                - "available"
                - "pending"
                - "sold"
                type: "string"
                description: "pet status in the store"
              category:
                $ref: "#/definitions/Category"
              photoUrls:
                xml:
                  wrapped: true
                type: "array"
                items:
                  xml:
                    name: "photoUrl"
                  type: "string"
          $schema: "http://json-schema.org/draft-07/schema#"
          definitions:
            Tag:
              xml:
                name: "Tag"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
            Category:
              xml:
                name: "Category"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
      "400": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-getInventory"
    name: "getInventory"
    createdWhen: 1751626075632
    modifiedWhen: 1751626075632
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/store/inventory"
    specification:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      security:
      - api_key: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "integer"
                  format: "int32"
          description: "successful operation"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
    requestSchema: {}
    responseSchemas:
      "200":
        application/json:
          type: "object"
          additionalProperties:
            type: "integer"
            format: "int32"
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-getOrderById"
    name: "getOrderById"
    createdWhen: 1751626075634
    modifiedWhen: 1751626075634
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/store/order/{orderId}"
    specification:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid ID supplied"
        "404":
          content: {}
          description: "Order not found"
      parameters:
      - in: "path"
        name: "orderId"
        schema:
          type: "integer"
          format: "int64"
          maximum: 10
          minimum: 1
        required: true
        description: "ID of pet that needs to be fetched"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions"
      operationId: "getOrderById"
    requestSchema:
      parameters:
      - in: "path"
        name: "orderId"
        schema:
          type: "integer"
          format: "int64"
          maximum: 10.0
          minimum: 1
        required: true
        description: "ID of pet that needs to be fetched"
    responseSchemas:
      "200":
        application/xml:
          $id: "http://system.catalog/schemas/#/components/schemas/Order"
          xml:
            name: "Order"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            id:
              type: "integer"
              format: "int64"
            petId:
              type: "integer"
              format: "int64"
            status:
              enum:
              - "placed"
              - "approved"
              - "delivered"
              type: "string"
              description: "Order Status"
            complete:
              type: "boolean"
            quantity:
              type: "integer"
              format: "int32"
            shipDate:
              type: "string"
              format: "date-time"
          definitions: {}
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/Order"
          xml:
            name: "Order"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            id:
              type: "integer"
              format: "int64"
            petId:
              type: "integer"
              format: "int64"
            status:
              enum:
              - "placed"
              - "approved"
              - "delivered"
              type: "string"
              description: "Order Status"
            complete:
              type: "boolean"
            quantity:
              type: "integer"
              format: "int32"
            shipDate:
              type: "string"
              format: "date-time"
          definitions: {}
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-getPetById"
    name: "getPetById"
    createdWhen: 1751626075636
    modifiedWhen: 1751626075636
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/pet/{petId}"
    specification:
      tags:
      - "pet"
      summary: "Find pet by ID"
      security:
      - api_key: []
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid ID supplied"
        "404":
          content: {}
          description: "Pet not found"
      parameters:
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "ID of pet to return"
      description: "Returns a single pet"
      operationId: "getPetById"
    requestSchema:
      parameters:
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "ID of pet to return"
    responseSchemas:
      "200":
        application/xml:
          $id: "http://system.catalog/schemas/#/components/schemas/Pet"
          xml:
            name: "Pet"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          required:
          - "name"
          - "photoUrls"
          properties:
            id:
              type: "integer"
              format: "int64"
            name:
              type: "string"
              example: "doggie"
            tags:
              xml:
                wrapped: true
              type: "array"
              items:
                $ref: "#/definitions/Tag"
            status:
              enum:
              - "available"
              - "pending"
              - "sold"
              type: "string"
              description: "pet status in the store"
            category:
              $ref: "#/definitions/Category"
            photoUrls:
              xml:
                wrapped: true
              type: "array"
              items:
                xml:
                  name: "photoUrl"
                type: "string"
          definitions:
            Tag:
              xml:
                name: "Tag"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
            Category:
              xml:
                name: "Category"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/Pet"
          xml:
            name: "Pet"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          required:
          - "name"
          - "photoUrls"
          properties:
            id:
              type: "integer"
              format: "int64"
            name:
              type: "string"
              example: "doggie"
            tags:
              xml:
                wrapped: true
              type: "array"
              items:
                $ref: "#/definitions/Tag"
            status:
              enum:
              - "available"
              - "pending"
              - "sold"
              type: "string"
              description: "pet status in the store"
            category:
              $ref: "#/definitions/Category"
            photoUrls:
              xml:
                wrapped: true
              type: "array"
              items:
                xml:
                  name: "photoUrl"
                type: "string"
          definitions:
            Tag:
              xml:
                name: "Tag"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
            Category:
              xml:
                name: "Category"
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                name:
                  type: "string"
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-getUserByName"
    name: "getUserByName"
    createdWhen: 1751626075638
    modifiedWhen: 1751626075638
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/user/{username}"
    specification:
      tags:
      - "user"
      summary: "Get user by user name"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid username supplied"
        "404":
          content: {}
          description: "User not found"
      parameters:
      - in: "path"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "The name that needs to be fetched. Use user1 for testing. "
      operationId: "getUserByName"
    requestSchema:
      parameters:
      - in: "path"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "The name that needs to be fetched. Use user1 for testing. "
    responseSchemas:
      "200":
        application/xml:
          $id: "http://system.catalog/schemas/#/components/schemas/User"
          xml:
            name: "User"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            id:
              type: "integer"
              format: "int64"
            email:
              type: "string"
            phone:
              type: "string"
            lastName:
              type: "string"
            password:
              type: "string"
            username:
              type: "string"
            firstName:
              type: "string"
            userStatus:
              type: "integer"
              format: "int32"
              description: "User Status"
          definitions: {}
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/User"
          xml:
            name: "User"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            id:
              type: "integer"
              format: "int64"
            email:
              type: "string"
            phone:
              type: "string"
            lastName:
              type: "string"
            password:
              type: "string"
            username:
              type: "string"
            firstName:
              type: "string"
            userStatus:
              type: "integer"
              format: "int32"
              description: "User Status"
          definitions: {}
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-loginUser"
    name: "loginUser"
    createdWhen: 1751626075640
    modifiedWhen: 1751626075640
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/user/login"
    specification:
      tags:
      - "user"
      summary: "Logs user into the system"
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: "string"
            application/json:
              schema:
                type: "string"
          headers:
            X-Rate-Limit:
              schema:
                type: "integer"
                format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              schema:
                type: "string"
                format: "date-time"
              description: "date in UTC when token expires"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid username/password supplied"
      parameters:
      - in: "query"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "The user name for login"
      - in: "query"
        name: "password"
        schema:
          type: "string"
        required: true
        description: "The password for login in clear text"
      operationId: "loginUser"
    requestSchema:
      parameters:
      - in: "query"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "The user name for login"
      - in: "query"
        name: "password"
        schema:
          type: "string"
        required: true
        description: "The password for login in clear text"
    responseSchemas:
      "200":
        application/xml:
          type: "string"
        application/json:
          type: "string"
      "400": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-logoutUser"
    name: "logoutUser"
    createdWhen: 1751626075641
    modifiedWhen: 1751626075641
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "GET"
    path: "/user/logout"
    specification:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      responses:
        default:
          content: {}
          description: "successful operation"
      operationId: "logoutUser"
    requestSchema: {}
    responseSchemas:
      default: {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-placeOrder"
    name: "placeOrder"
    createdWhen: 1751626075643
    modifiedWhen: 1751626075643
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/store/order"
    specification:
      tags:
      - "store"
      summary: "Place an order for a pet"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: "successful operation"
        "400":
          content: {}
          description: "Invalid Order"
      operationId: "placeOrder"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
        description: "order placed for purchasing the pet"
      x-codegen-request-body-name: "body"
    requestSchema:
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/Order"
        xml:
          name: "Order"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          id:
            type: "integer"
            format: "int64"
          petId:
            type: "integer"
            format: "int64"
          status:
            enum:
            - "placed"
            - "approved"
            - "delivered"
            type: "string"
            description: "Order Status"
          complete:
            type: "boolean"
          quantity:
            type: "integer"
            format: "int32"
          shipDate:
            type: "string"
            format: "date-time"
        definitions: {}
    responseSchemas:
      "200":
        application/xml:
          $id: "http://system.catalog/schemas/#/components/schemas/Order"
          xml:
            name: "Order"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            id:
              type: "integer"
              format: "int64"
            petId:
              type: "integer"
              format: "int64"
            status:
              enum:
              - "placed"
              - "approved"
              - "delivered"
              type: "string"
              description: "Order Status"
            complete:
              type: "boolean"
            quantity:
              type: "integer"
              format: "int32"
            shipDate:
              type: "string"
              format: "date-time"
          definitions: {}
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/Order"
          xml:
            name: "Order"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            id:
              type: "integer"
              format: "int64"
            petId:
              type: "integer"
              format: "int64"
            status:
              enum:
              - "placed"
              - "approved"
              - "delivered"
              type: "string"
              description: "Order Status"
            complete:
              type: "boolean"
            quantity:
              type: "integer"
              format: "int32"
            shipDate:
              type: "string"
              format: "date-time"
          definitions: {}
      "400": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-updatePet"
    name: "updatePet"
    createdWhen: 1751626075645
    modifiedWhen: 1751626075645
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "PUT"
    path: "/pet"
    specification:
      tags:
      - "pet"
      summary: "Update an existing pet"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "400":
          content: {}
          description: "Invalid ID supplied"
        "404":
          content: {}
          description: "Pet not found"
        "405":
          content: {}
          description: "Validation exception"
      operationId: "updatePet"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
        description: "Pet object that needs to be added to the store"
      x-codegen-request-body-name: "body"
    requestSchema:
      application/xml:
        $id: "http://system.catalog/schemas/#/components/schemas/Pet"
        xml:
          name: "Pet"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        required:
        - "name"
        - "photoUrls"
        properties:
          id:
            type: "integer"
            format: "int64"
          name:
            type: "string"
            example: "doggie"
          tags:
            xml:
              wrapped: true
            type: "array"
            items:
              $ref: "#/definitions/Tag"
          status:
            enum:
            - "available"
            - "pending"
            - "sold"
            type: "string"
            description: "pet status in the store"
          category:
            $ref: "#/definitions/Category"
          photoUrls:
            xml:
              wrapped: true
            type: "array"
            items:
              xml:
                name: "photoUrl"
              type: "string"
        definitions:
          Tag:
            xml:
              name: "Tag"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
          Category:
            xml:
              name: "Category"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/Pet"
        xml:
          name: "Pet"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        required:
        - "name"
        - "photoUrls"
        properties:
          id:
            type: "integer"
            format: "int64"
          name:
            type: "string"
            example: "doggie"
          tags:
            xml:
              wrapped: true
            type: "array"
            items:
              $ref: "#/definitions/Tag"
          status:
            enum:
            - "available"
            - "pending"
            - "sold"
            type: "string"
            description: "pet status in the store"
          category:
            $ref: "#/definitions/Category"
          photoUrls:
            xml:
              wrapped: true
            type: "array"
            items:
              xml:
                name: "photoUrl"
              type: "string"
        definitions:
          Tag:
            xml:
              name: "Tag"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
          Category:
            xml:
              name: "Category"
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
    responseSchemas:
      "400": {}
      "404": {}
      "405": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-updatePetWithForm"
    name: "updatePetWithForm"
    createdWhen: 1751626075647
    modifiedWhen: 1751626075647
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/pet/{petId}"
    specification:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "405":
          content: {}
          description: "Invalid input"
      parameters:
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "ID of pet that needs to be updated"
      operationId: "updatePetWithForm"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  description: "Updated name of the pet"
                status:
                  type: "string"
                  description: "Updated status of the pet"
    requestSchema:
      parameters:
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "ID of pet that needs to be updated"
      application/x-www-form-urlencoded:
        $id: "http://system.catalog/schemas/#/components/schemas/Schema"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          name:
            type: "string"
            description: "Updated name of the pet"
          status:
            type: "string"
            description: "Updated status of the pet"
    responseSchemas:
      "405": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-updateUser"
    name: "updateUser"
    createdWhen: 1751626075649
    modifiedWhen: 1751626075649
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "PUT"
    path: "/user/{username}"
    specification:
      tags:
      - "user"
      summary: "Updated user"
      responses:
        "400":
          content: {}
          description: "Invalid user supplied"
        "404":
          content: {}
          description: "User not found"
      parameters:
      - in: "path"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "name that need to be updated"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        description: "Updated user object"
      x-codegen-request-body-name: "body"
    requestSchema:
      parameters:
      - in: "path"
        name: "username"
        schema:
          type: "string"
        required: true
        description: "name that need to be updated"
      application/json:
        $id: "http://system.catalog/schemas/#/components/schemas/User"
        xml:
          name: "User"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          id:
            type: "integer"
            format: "int64"
          email:
            type: "string"
          phone:
            type: "string"
          lastName:
            type: "string"
          password:
            type: "string"
          username:
            type: "string"
          firstName:
            type: "string"
          userStatus:
            type: "integer"
            format: "int32"
            description: "User Status"
        definitions: {}
    responseSchemas:
      "400": {}
      "404": {}
  - id: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7-uploadFile"
    name: "uploadFile"
    createdWhen: 1751626075651
    modifiedWhen: 1751626075651
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    method: "POST"
    path: "/pet/{petId}/uploadImage"
    specification:
      tags:
      - "pet"
      summary: "uploads an image"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
          description: "successful operation"
      parameters:
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "ID of pet to update"
      operationId: "uploadFile"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
                  description: "file to upload"
                additionalMetadata:
                  type: "string"
                  description: "Additional data to pass to server"
    requestSchema:
      parameters:
      - in: "path"
        name: "petId"
        schema:
          type: "integer"
          format: "int64"
        required: true
        description: "ID of pet to update"
      multipart/form-data:
        $id: "http://system.catalog/schemas/#/components/schemas/Schema"
        type: "object"
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          file:
            type: "string"
            format: "binary"
            description: "file to upload"
          additionalMetadata:
            type: "string"
            description: "Additional data to pass to server"
    responseSchemas:
      "200":
        application/json:
          $id: "http://system.catalog/schemas/#/components/schemas/ApiResponse"
          type: "object"
          $schema: "http://json-schema.org/draft-07/schema#"
          properties:
            code:
              type: "integer"
              format: "int32"
            type:
              type: "string"
            message:
              type: "string"
          definitions: {}
  specificationSources:
  - id: "76ab0370-ca3b-41b5-bc53-904f34f28c14"
    name: "petstore.json"
    createdWhen: 1751626075657
    modifiedWhen: 1751626075657
    createdBy:
      id: "0"
      username: "developer"
    modifiedBy:
      id: "0"
      username: "developer"
    sourceHash: "bb116730d391e330119c691f9b124d07b9afdea61b5a252345b577e9a4c2f98b"
    fileName: "source-2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore-1.0.7/petstore.json"
    mainSource: true
  parentId: "2d73a4b6-6499-47d5-864f-0c0f86654d90-petstore"
